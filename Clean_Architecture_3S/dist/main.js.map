{"version":3,"file":"main.js","mappings":"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","sources":["./src/app/app-routing.module.ts","./src/app/app.component.ts","./src/app/app.component.html","./src/app/app.module.ts","./src/app/core/services/lookup/city/citeservices.ts","./src/app/core/services/lookup/governorat/governoratservices.ts","./src/app/core/services/users/registrationservice.ts","./src/app/modules/home/home.module.ts","./src/app/modules/home/home.routing.ts","./src/app/modules/home/page/home.component.ts","./src/app/modules/home/page/home.component.html","./src/app/shared/page/error.component.ts","./src/app/shared/page/error.component.html","./src/environments/.env.ts","./src/environments/environment.ts","./src/main.ts"],"sourcesContent":["import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { errorComponent } from './shared/page/error.component';\n\nconst routes: Routes = [\n    {path:\"/\" ,loadChildren:()=>import('@modules/home/home.module').then(a=>a.HomeModule)},\n    {path:\"**\" ,component:errorComponent},\n\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent {}\n","<router-outlet></router-outlet>\n\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { AppComponent } from './app.component';\nimport { AppRoutingModule } from './app-routing.module';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { HomeModule } from './modules/home/home.module';\nimport { ToastrModule } from 'ngx-toastr';\n\n@NgModule({\n  declarations: [\n    AppComponent\n  ],\n  imports: [\n    HomeModule,\n    AppRoutingModule,\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule {}\n","import { EnvironmentInjector, Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { cityDto } from '../../../Dto/loookup/cityDto/cityDto';\r\nimport { environment } from '@env';\r\n\r\n\r\nlet url = environment.baseUrl;\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class cityservice {\r\n    private apiUrl = url ; // Replace with your actual API endpoint\r\n\r\n  constructor(private http: HttpClient) {}\r\n\r\n  getallcitiesbygovernorateid(governorateid: string): Observable<cityDto[]> {\r\n      return this.http.get<cityDto[]>(this.apiUrl + '/city/getallcitiesbygovernorateid?governorateid=' + governorateid);\r\n  }\r\n\r\n  getallcities(): Observable<cityDto[]> {\r\n    return this.http.get<cityDto[]>(this.apiUrl + '/city/getallcities');\r\n}\r\n\r\n  \r\n}\r\n","import { EnvironmentInjector, Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { governoratDto } from '../../../Dto/loookup/governoratDto/governoratDto';\r\nimport { environment } from '@env';\r\n\r\n\r\nlet url = environment.baseUrl;\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class governoratservices {\r\n    private apiUrl = url ; // Replace with your actual API endpoint\r\n\r\n  constructor(private http: HttpClient) {}\r\n\r\n  getallgovernorates(): Observable<governoratDto[]> {\r\n    return this.http.get<governoratDto[]>(this.apiUrl + '/Governorate/getallgovernorates');\r\n}\r\n  \r\n}\r\n","import { EnvironmentInjector, Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { CreateUserCommand } from '../../Dto/usersdto/Createusercommand';\r\nimport { environment } from '@env';\r\n\r\nlet url = environment.baseUrl;\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class registrationservice {\r\n    private apiUrl = url ; // Replace with your actual API endpoint\r\n\r\n  constructor(private http: HttpClient) {}\r\n\r\n  submitRegistration(formData: CreateUserCommand): Observable<string> {\r\n    return this.http.post<string>(this.apiUrl +'/users/AddUser', formData);\r\n  }\r\n  \r\n}\r\n","import { NgModule } from '@angular/core';\nimport { HomeComponent } from './page/home.component';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { ToastrModule } from 'ngx-toastr';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { HomeRoutingModule } from './home.routing';\nimport { CommonModule } from '@angular/common';\n\n@NgModule({\n  declarations: [HomeComponent],\n  imports: [\n    FormsModule,\n    ReactiveFormsModule,\n    ToastrModule.forRoot(), \n    BrowserModule,\n\n  ],\n  exports: [    CommonModule,\n    HomeRoutingModule],\n  providers: []\n})\nexport class HomeModule {}\n","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { HomeComponent } from './page/home.component';\n\nexport const routes: Routes = [\n\n  { path: '', component: HomeComponent}\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class HomeRoutingModule {}\n","import { Component, OnInit } from '@angular/core';\nimport { FormBuilder , FormArray, Validators, AbstractControl, FormsModule, ReactiveFormsModule, FormGroup } from '@angular/forms';\nimport { governoratDto } from '../../../core/Dto/loookup/governoratDto/governoratDto';\nimport { cityDto } from '../../../core/Dto/loookup/cityDto/cityDto';\nimport { registrationservice } from '../../../core/services/users/registrationservice';\nimport { cityservice } from '../../../core/services/lookup/city/citeservices';\nimport { governoratservices } from '../../../core/services/lookup/governorat/governoratservices';\nimport { ToastrModule, ToastrService } from 'ngx-toastr';\n\n@Component({\n  selector: 'app-home',\n  templateUrl: './home.component.html',\n  styleUrls: ['./home.component.scss']\n})\n\nexport class HomeComponent {\n  registrationForm: FormGroup;\n  governates: governoratDto[]; // Replace with actual data from DB\n  cities: cityDto[]; // Replace with actual data from DB\n  currentAdd: FormGroup ;\n  currentcities: cityDto[];\n\n  constructor(private fb: FormBuilder, private registrationService: registrationservice,\n    private cityservices: cityservice,\n    private governorateservices: governoratservices,\n    private toastrService:ToastrService\n  ) {} // Inject the service\n\n  ngOnInit(): void {\n    this.registrationForm = this.fb.group({\n      firstName: ['', [Validators.required, Validators.maxLength(20), Validators.pattern(/^[\\u0621-\\u064A\\u0660-\\u0669A-Za-z ]+$/)]],\n      middleName: ['', [Validators.maxLength(40), Validators.pattern(/^[\\u0621-\\u064A\\u0660-\\u0669A-Za-z ]+$/)]],\n      lastName: ['', [Validators.required, Validators.maxLength(20), Validators.pattern(/^[\\u0621-\\u064A\\u0660-\\u0669A-Za-z ]+$/)]],\n      birthDate: ['', [Validators.required, this.minAgeValidator(20)]],\n      mobileNumber: ['', [Validators.required, Validators.pattern(/^\\+021\\d{9,13}$/)]],\n      email: ['', [Validators.required, Validators.email]],\n      addresses: this.fb.array([])\n    });\n\n    this.getgovernorates();\n    this.getetallcities()\n    this.currentAdd = this.createAddress({});\n  }\n\n  getgovernorates() {\n    this.governorateservices.getallgovernorates().subscribe(obj => {\n      this.governates = obj;\n    });\n  }\n\n  getetallcitiesbygovernorateid(e) {\n    if (!this.cities) return;\n    this.currentcities = this.cities.filter(a => a.governorateId == e.target.value);\n    return;\n\n  }\n  getetallcities() {\n    this.cityservices.getallcities().subscribe(obj => {\n      this.cities = obj;\n    });\n    this.toastrService.success('Registration successful')\n\n  }\n\n\n\n  createAddress(addressData: any): FormGroup {\n    return this.fb.group({\n      governate: [addressData ? addressData.governate : '', Validators.required],\n      cityId: [addressData ? addressData.cityId : '', Validators.required],\n      street: [addressData ? addressData.street : '', Validators.required],\n      buildingNumber: [addressData ? addressData.buildingNumber : '', Validators.required],\n      flatNumber: [addressData ? addressData.flatNumber : '', Validators.required]\n    });\n  }\n\n  addAddress(): void {\n    this.addresses.push(this.createAddress(this.currentAdd.value));\n    this.currentAdd.reset();\n  }\n\n\n\n  getGovernorateName(id) {\n    if (!id) return '';\n    return this.governates.filter(a => a.id == id)[0].name;\n  }\n\n  \n  getCityName(id) {\n    if (!id) return '';\n    let obj = this.cities.filter(a => a.id == id)[0];\n    if (!obj)\n      return ''\n    return obj.name;\n  }\n\n  removeAddress(index: number): void {\n    this.addresses.removeAt(index);\n  }\n\n  get addresses(): FormArray {\n    return this.registrationForm.get('addresses') as FormArray;\n  }\n\n\n  minAgeValidator(minAge: number): Validators {\n    return (control: AbstractControl): { [key: string]: any } | null => {\n      const birthDate = new Date(control.value);\n      const age = new Date().getFullYear() - birthDate.getFullYear();\n      if (age < minAge) {\n        return { minAge: { requiredAge: minAge, actualAge: age } };\n      }\n      return null;\n    };\n  }\n\n  onSubmit(): void {\n    debugger;\n    if (this.registrationForm.valid) {\n      this.registrationService.submitRegistration(this.registrationForm.value).subscribe(\n        response => {\n          this.toastrService.success('Registration successful')\n        },\n        error => {\n          this.toastrService.error('Registration failed')\n        }\n      );\n    } else {\n      this.toastrService.error('Form is invalid')\n    }\n  }\n }\n","\n<div id=\"content\">\n  <form [formGroup]=\"registrationForm\" (ngSubmit)=\"onSubmit()\">\n    <div>\n      <label for=\"firstName\">First Name</label>\n      <input id=\"firstName\" formControlName=\"firstName\">\n      <div *ngIf=\"registrationForm.get('firstName').invalid && (registrationForm.get('firstName').dirty || registrationForm.get('firstName').touched)\">\n        <small *ngIf=\"registrationForm.get('firstName').hasError('required')\">First Name is required.</small>\n        <small *ngIf=\"registrationForm.get('firstName').hasError('maxlength')\">Max length is 20 characters.</small>\n        <small *ngIf=\"registrationForm.get('firstName').hasError('pattern')\">Only Arabic or English letters and spaces are allowed.</small>\n      </div>\n    </div>\n    \n    <div>\n      <label for=\"middleName\">Middle Name</label>\n      <input id=\"middleName\" formControlName=\"middleName\">\n      <div *ngIf=\"registrationForm.get('middleName').invalid && (registrationForm.get('middleName').dirty || registrationForm.get('middleName').touched)\">\n        <small *ngIf=\"registrationForm.get('middleName').hasError('maxlength')\">Max length is 40 characters.</small>\n        <small *ngIf=\"registrationForm.get('middleName').hasError('pattern')\">Only Arabic or English letters and spaces are allowed.</small>\n      </div>\n    </div>\n  \n    <div>\n      <label for=\"lastName\">Last Name</label>\n      <input id=\"lastName\" formControlName=\"lastName\">\n      <div *ngIf=\"registrationForm.get('lastName').invalid && (registrationForm.get('lastName').dirty || registrationForm.get('lastName').touched)\">\n        <small *ngIf=\"registrationForm.get('lastName').hasError('required')\">Last Name is required.</small>\n        <small *ngIf=\"registrationForm.get('lastName').hasError('maxlength')\">Max length is 20 characters.</small>\n        <small *ngIf=\"registrationForm.get('lastName').hasError('pattern')\">Only Arabic or English letters and spaces are allowed.</small>\n      </div>\n    </div>\n    \n    <div>\n      <label for=\"birthDate\">Birth Date</label>\n      <input type=\"date\" id=\"birthDate\" formControlName=\"birthDate\">\n      <div *ngIf=\"registrationForm.get('birthDate').invalid && (registrationForm.get('birthDate').dirty || registrationForm.get('birthDate').touched)\">\n        <small *ngIf=\"registrationForm.get('birthDate').hasError('required')\">Birth Date is required.</small>\n        <small *ngIf=\"registrationForm.get('birthDate').hasError('minAge')\">Minimum age is 20 years.</small>\n      </div>\n    </div>\n  \n    <div>\n      <label for=\"mobileNumber\">Mobile Number</label>\n      <input id=\"mobileNumber\" formControlName=\"mobileNumber\">\n      <div *ngIf=\"registrationForm.get('mobileNumber').invalid && (registrationForm.get('mobileNumber').dirty || registrationForm.get('mobileNumber').touched)\">\n        <small *ngIf=\"registrationForm.get('mobileNumber').hasError('required')\">Mobile Number is required.</small>\n        <small *ngIf=\"registrationForm.get('mobileNumber').hasError('pattern')\">Format example +021006158123.</small>\n      </div>\n    </div>\n    \n    <div>\n      <label for=\"email\">Email</label>\n      <input id=\"email\" formControlName=\"email\">\n      <div *ngIf=\"registrationForm.get('email').invalid && (registrationForm.get('email').dirty || registrationForm.get('email').touched)\">\n        <small *ngIf=\"registrationForm.get('email').hasError('required')\">Email is required.</small>\n        <small *ngIf=\"registrationForm.get('email').hasError('email')\">Invalid email.</small>\n      </div>\n    </div>\n  \n    <div>\n      <form [formGroup]=\"currentAdd\" >\n        <h4>Add Addresses</h4>\n        <div>\n          <label for=\"governate\">Governate</label>\n          <select id=\"governate\" formControlName=\"governate\" (change)=\"getetallcitiesbygovernorateid($event)\">\n            <option selected value=null>--Selcet Governate</option>\n            <option *ngFor=\"let gov of governates\" [value]=\"gov.id\">{{gov.name}}</option>\n          </select>\n          <div *ngIf=\"currentAdd?.get('governate').invalid && (currentAdd?.get('governate').dirty || currentAdd?.get('governate').touched)\">\n            <small *ngIf=\"currentAdd?.get('governate').hasError('required')\">Governate is required.</small>\n          </div>\n        </div>\n        \n        <div>\n          <label for=\"city\">City</label>\n          <select id=\"city\" formControlName=\"cityId\">\n            <option  selected value=null>--Selcet City</option>\n            <option *ngFor=\"let city of currentcities\" [value]=\"city.id\">{{city.name}}</option>\n          </select>\n          <div *ngIf=\"currentAdd?.get('cityId').invalid && (currentAdd?.get('cityId').dirty || currentAdd?.get('cityId').touched)\">\n            <small *ngIf=\"currentAdd?.get('cityId').hasError('required')\">cityId is required.</small>\n          </div>\n        </div>\n  \n        <div>\n          <label for=\"street\">Street</label>\n          <input id=\"street\" formControlName=\"street\">\n          <div *ngIf=\"currentAdd?.get('street').invalid && (currentAdd?.get('street').dirty || currentAdd?.get('street').touched)\">\n            <small *ngIf=\"currentAdd?.get('street').hasError('required')\">Street is required.</small>\n            <small *ngIf=\"currentAdd?.get('street').hasError('maxlength')\">Max length is 200 characters.</small>\n          </div>\n        </div>\n        \n        <div>\n          <label for=\"buildingNumber\">Building Number</label>\n          <input id=\"buildingNumber\" formControlName=\"buildingNumber\">\n          <div *ngIf=\"currentAdd?.get('buildingNumber').invalid && (currentAdd?.get('buildingNumber').dirty || currentAdd?.get('buildingNumber').touched)\">\n            <small *ngIf=\"currentAdd?.get('buildingNumber').hasError('required')\">Building Number is required.</small>\n          </div>\n        </div>\n\n        <div>\n          <label for=\"flatNumber\">Flat Number</label>\n          <input id=\"flatNumber\" formControlName=\"flatNumber\">\n          <div *ngIf=\"currentAdd?.get('flatNumber').invalid && (currentAdd?.get('flatNumber').dirty || currentAdd?.get('flatNumber').touched)\">\n            <small *ngIf=\"currentAdd?.get('flatNumber').hasError('required')\">Building Number is required.</small>\n          </div>\n        </div>\n\n\n      </form>\n      </div> \n  \n    <table>\n      <thead>\n        <tr>\n          <th>governate</th>\n          <th>City</th>\n          <th>Street</th>\n          <th>buildingNumber</th>\n          <th>flatNumber</th>\n          <th>Actions</th>\n        </tr>\n      </thead>\n      <tbody formArrayName=\"addresses\">\n        <tr *ngFor=\"let address of addresses.controls; let i=index\" [formGroupName]=\"i\">\n          <td>\n            <label>{{getGovernorateName(address?.get('governate')?.value)}}</label>\n          </td>\n          <td>\n            <label>{{getCityName(address?.get('cityId')?.value)}}</label>\n            \n          </td>\n          <td>\n            <label>{{address?.get('street')?.value}}</label>\n            \n          </td>\n          <td>\n            <label>{{address?.get('buildingNumber')?.value}}</label>\n          </td>\n          <td>\n            <label>{{address?.get('flatNumber')?.value}}</label>\n          </td>\n          <td>\n            <button type=\"button\" (click)=\"removeAddress(i)\">Remove</button>\n          </td>\n        </tr>\n      </tbody>\n    </table>\n  \n    <button type=\"button\" (click)=\"addAddress()\">Add Address</button>\n\n    <button type=\"submit\">Submit</button>\n  </form>\n  \n</div>\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-error',\n  templateUrl: './error.component.html',\n  styleUrls: ['./error.component.scss']\n})\n\nexport class errorComponent {\n\n  constructor(  ) {} // Inject the service\n\n  ngOnInit(): void {\n  }\n }\n","<h1>error page</h1>","export default {\n    'npm_package_version': '1.0.0'\n};\n  ","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build ---prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\n// `.env.ts` is generated by the `npm run env` command\nimport env from './.env';\n\nexport const environment = {\n  production: false,\n  version: env.npm_package_version + '-dev',\n  baseUrl: 'https://localhost:7024/api',\n  serverUrl: '/api',\n  envName: 'DEV'\n};\n\n/*\n * In development mode, to ignore zone related error stack frames such as\n * `zone.run`, `zoneDelegate.invokeTask` for easier debugging, you can\n * import the following file, but please comment it out in production mode\n * because it will have performance impact when throw error\n */\n// import 'zone.js/plugins/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic()\n  .bootstrapModule(AppModule)\n  .catch(err => console.log(err));\n"],"names":[],"sourceRoot":"webpack:///","x_google_ignoreList":[]}